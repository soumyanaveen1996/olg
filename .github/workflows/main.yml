name: OLG Build and Deploy

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Select build type'
        required: true
        default: 'dev-olg'
        options:
          - 'dev_frontm'
          - 'dev_olg'
          - 'prod_frontm'
          - 'prod_olg'
      build_description:
        description: 'Description of the build'
        required: true
        type: string
      docker_tags:
        description: 'Tags for Docker images (comma-separated)'
        required: true
        type: string
      branch_type:
        description: 'Type the required branch'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
   

    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Increment version in package.json
        id: increment-version
        run: |
           cd webapp
           current_version=$(jq -r '.version' package.json)
           new_version=$(echo $current_version | awk -F. -v OFS=. '{print $1,$2,$3+1}')
           jq --arg new_version "$new_version" '.version = $new_version' package.json > package.json.tmp
           mv package.json.tmp package.json
           echo "::set-output name=new_version::$new_version"
           echo "New_version=$new_version"
      - name: Commit version update
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git add webapp/package.json
          git commit -m "Increment version"
          git push origin master
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID_DEV }}
          aws-region: us-east-1

    
      
       
      - name: Build Docker images
        run: docker-compose -f compose.yaml build
     
      - name: Fetch image name and tag from Compose file
        id: fetch_image_info
        run: |
         IMAGE_NAME_EDGE=$(grep -E '^\s{2}(edge)' compose.yaml | awk '{$1=$1};1' | sed 's/:$//')
         IMAGE_TAG_EDGE=$(grep -A 3 'edge' compose.yaml | grep 'image:' | awk '{print $2}' | cut -d ':' -f 2)
         IMAGE_NAME_WEBAPP=$(grep -E '^\s{2}(webapp):' compose.yaml | awk '{$1=$1};1' | sed 's/:$//' | awk '{print $NF}')
         IMAGE_TAG_WEBAPP=$(grep -A 3 'webapp' compose.yaml | grep 'image:' | awk '{print $2}' | cut -d ':' -f 2)
         echo "::set-output name=image_name_edge::$IMAGE_NAME_EDGE"
         echo "::set-output name=image_tag_edge::$IMAGE_TAG_EDGE"
         echo "::set-output name=image_name_webapp::$IMAGE_NAME_WEBAPP"
         echo "::set-output name=image_tag_webapp::$IMAGE_TAG_WEBAPP"


      - name: Tag Docker images
        run: |
          docker tag ${{ steps.fetch_image_info.outputs.image_name_edge }}:${{ steps.fetch_image_info.outputs.image_tag_edge }} soumyanaveen/edge:${{ github.event.inputs.docker_tags }}
          docker tag ${{ steps.fetch_image_info.outputs.image_name_webapp }}:${{ steps.fetch_image_info.outputs.image_tag_webapp }} soumyanaveen/webapp:${{ github.event.inputs.docker_tags }}
     
     
      - name: Backup Compose File to S3
        run: |
          aws s3 cp compose.yaml s3://logzi/compose-backup-$(date +"%Y-%m-%d_%H-%M-%S").yaml
         
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Images to Docker Hub
        run: |
           docker push soumyanaveen/edge:${{ github.event.inputs.docker_tags}}
           docker push soumyanaveen/webapp:${{ github.event.inputs.docker_tags}}
      - name: Update Tags in Docker Compose File
        run: |
           current_tag_edge=$(grep -oP '(?<=image: edge:)[^\s]+' compose.yaml)
           current_tag_webapp=$(grep -oP '(?<=image: edge:)[^\s]+' compose.yaml)
           sed -i "s/image: edge:${current_tag_edge}/image: edge:${{ github.event.inputs.docker_tags }}/" compose.yaml
           sed -i "s/image: webapp:${current_tag_webapp}/image: edge:${{ github.event.inputs.docker_tags }}/" compose.yaml

      - name: updated in the composefile
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git add compose.yaml
          git commit -m "updating the tags"
          git push origin master --force
      - name: Copy Compose File to Unique S3 Bucket
        run: |
          bucket_name="s3-bucket-${{ github.event.inputs.docker_tags }}"
          aws s3 mb s3://$bucket_name
          aws s3 cp compose.yaml s3://$bucket_name/compose-${{ github.event.inputs.docker_tags }}.yaml
  
   
      - name: Build & Deploy
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            HOSTNAME: ${{secrets.SSH_HOST}}
            USER_NAME: ${{secrets.USER_NAME}}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              bash /home/ubuntu/docker-compose4.sh
              sudo docker-compose -f compose.yaml up -d
              zip docker-compose.zip compose.yaml
              '
    
      - name: Send email notification for deployment job
        if: success()      
        uses: dawidd6/action-send-mail@v3
        with:
         server_address: smtp.gmail.com
         server_port: 587
         username: ${{ secrets.EMAIL_USERNAME }}
         password: ${{ secrets.EMAIL_PASSWORD }}
         from: 'kamchamswarna@gmail.com'
         to: 'soumyasg12@gmail.com'
         subject: 'Deployment job completed successfully'
         body: |
          'The deployment job in your workflow completed successfully'
           New Version:${{ steps.increment-version.outputs.new_version }}
           Description:${{ github.event.inputs.build_description }}

